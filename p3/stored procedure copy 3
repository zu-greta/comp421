/*
CONNECT TO COMP421;

-- Remember to put the create table ddls for the tables with foreign key references
--    ONLY AFTER the parent tables have already been created.

-- orders are changed from p1 to make more sense logically
CREATE TABLE Users (
    user_id INT NOT NULL,
    name VARCHAR(25) NOT NULL,
    email VARCHAR(40) NOT NULL,
    phone_number VARCHAR(22) NOT NULL,
    address VARCHAR(50) NOT NULL,
    credit_card_information VARCHAR(28) NOT NULL,
    PRIMARY KEY (user_id)
);
CREATE TABLE Registered (
    user_id INT NOT NULL,
    username VARCHAR(10) UNIQUE NOT NULL, ------------------------------------------------------------add
    password VARCHAR(10) NOT NULL,
    language CHAR(2) DEFAULT 'no' NOT NULL, -- modified from p1
    totalspent DECIMAL(15, 2) DEFAULT 0.00 NOT NULL, 
    --history CLOB, -------------------------------------------------------------------------------------drop?
    PRIMARY KEY (user_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
CREATE TABLE Cities (
    city_name VARCHAR(20) NOT NULL,
    country VARCHAR(15) NOT NULL,
    PRIMARY KEY (city_name, country)
);
CREATE TABLE DepartureCity( 
    departure_city VARCHAR(20) NOT NULL,
    departure_country VARCHAR(15) NOT NULL,
    airport_departure_name VARCHAR(65) NOT NULL,
    PRIMARY KEY (departure_city, departure_country),
    FOREIGN KEY (departure_city, departure_country) REFERENCES Cities(city_name, country)
);
CREATE TABLE ArrivalCity( 
    arrival_city VARCHAR(20) NOT NULL,
    arrival_country VARCHAR(15) NOT NULL,
    airport_arrival_name VARCHAR(65) NOT NULL,
    PRIMARY KEY (arrival_city, arrival_country),
    FOREIGN KEY (arrival_city, arrival_country) REFERENCES Cities(city_name, country)
);
CREATE TABLE Route ( 
    departure_city VARCHAR(20) NOT NULL,
    departure_country VARCHAR(15) NOT NULL,
    arrival_city VARCHAR(20) NOT NULL,
    arrival_country VARCHAR(15) NOT NULL,
    PRIMARY KEY (departure_city, departure_country, arrival_city, arrival_country),
    FOREIGN KEY (departure_city, departure_country) REFERENCES DepartureCity(departure_city, departure_country),
    FOREIGN KEY (arrival_city, arrival_country) REFERENCES ArrivalCity(arrival_city, arrival_country)
);
CREATE TABLE Flights ( 
    flight_number VARCHAR(7) NOT NULL,
    airline_policy VARCHAR(45) NOT NULL,
    airline VARCHAR(25) NOT NULL,
    airplane_model VARCHAR(25) NOT NULL,
    economy_seats INT NOT NULL,
    premium_economy_seats INT,
    business_seats INT,
    first_class_seats INT,
    economy_cost DECIMAL(6, 2) NOT NULL,
    premium_economy_cost DECIMAL(6, 2),
    business_cost DECIMAL(7, 2),
    first_class_cost DECIMAL(7, 2),
    departure_city VARCHAR(20) NOT NULL,
    departure_country VARCHAR(15) NOT NULL,
    arrival_city VARCHAR(20) NOT NULL,
    arrival_country VARCHAR(15) NOT NULL,
    departure_date_time DATETIME NOT NULL,
    arrival_date_time DATETIME NOT NULL,
    flight_duration TIME NOT NULL,
    PRIMARY KEY (flight_number, departure_date_time),
    FOREIGN KEY (departure_city, departure_country, arrival_city, arrival_country) REFERENCES Route(departure_city, departure_country, arrival_city, arrival_country)
    --FOREIGN KEY (arrival_city, arrival_country) REFERENCES ArrivalCity(arrival_city, arrival_country)
);
CREATE TABLE Car (
    car_license_plate VARCHAR(10) NOT NULL,
    number_of_seats INT NOT NULL,
    car_rental_agency VARCHAR(12) NOT NULL,
    transmission_type VARCHAR(12) NOT NULL,
    car_model VARCHAR(25) NOT NULL,
    car_engine_type VARCHAR(10) NOT NULL,
    car_daily_cost DECIMAL(5, 2) NOT NULL, -- changed from p1
    city_name VARCHAR(20) NOT NULL,
    country VARCHAR(15) NOT NULL,
    company_policy VARCHAR(50) NOT NULL, 
    AC CHAR(1) NOT NULL, -- changed from p1
    carplay CHAR(1),
    PRIMARY KEY (car_license_plate),
    FOREIGN KEY (city_name, country) REFERENCES Cities(city_name, country)
);
CREATE TABLE Hotel ( 
    brand_affiliation VARCHAR(15) NOT NULL,
    hotel_address VARCHAR(50) NOT NULL,
    hotel_policy VARCHAR(100) NOT NULL, 
    airport_shuttle VARCHAR(20),
    business_facilities VARCHAR(40),
    restaurants VARCHAR(45),
    listing_name VARCHAR(35) NOT NULL,
    fitness_center VARCHAR(20),
    on_site_parking VARCHAR(45),
    pet_allowance CHAR(1),
    pool CHAR(1),
    city_name VARCHAR(20) NOT NULL,
    country VARCHAR(15) NOT NULL,
    PRIMARY KEY (brand_affiliation, hotel_address), 
    FOREIGN KEY (city_name, country) REFERENCES Cities(city_name, country)
);
CREATE TABLE Room ( 
    hotel_address VARCHAR(50) NOT NULL,
    brand_affiliation VARCHAR(15) NOT NULL,
    room_number INT NOT NULL,
    room_name VARCHAR(20) NOT NULL,
    -- availability removed from p1
    room_capacity INT NOT NULL,
    beds VARCHAR(15) NOT NULL,
    room_price DECIMAL(6, 2) NOT NULL,
    size VARCHAR(10) NOT NULL, -- changed from p1
    free_wifi CHAR(1) NOT NULL, -- changed from p1
    view VARCHAR(20) NOT NULL, -- changed from p1
    minibar CHAR(1) NOT NULL, -- changed from p1
    private_bathroom CHAR(1) NOT NULL, -- changed from p1
    smoking CHAR(1) NOT NULL, -- changed from p1
    PRIMARY KEY (hotel_address, brand_affiliation, room_number),
    FOREIGN KEY (brand_affiliation, hotel_address) REFERENCES Hotel(brand_affiliation, hotel_address)
);
CREATE TABLE FlightBooking ( 
    flight_reference_number INT NOT NULL,
    user_id INT NOT NULL,
    passenger_names VARCHAR(150) NOT NULL,
    flight_number VARCHAR(7) NOT NULL,
    departure_date_time DATETIME NOT NULL,
    flight_total_cost DECIMAL(9, 2) NOT NULL,
    fare_class VARCHAR(10) NOT NULL,
    seat_numbers VARCHAR(21) NOT NULL,
    plane_ticket_cost DECIMAL(8, 2) NOT NULL,
    plane_ticket_surcharge DECIMAL(7, 2) NOT NULL,
    plane_ticket_tax DECIMAL(7, 2) NOT NULL,
    flight_booking_fees DECIMAL(5, 2) NOT NULL,
    flight_booking_date DATE NOT NULL,
    PRIMARY KEY (flight_reference_number),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (flight_number, departure_date_time) REFERENCES Flights(flight_number, departure_date_time)
);
CREATE TABLE HotelBooking ( 
    hotel_reference_number INT NOT NULL,
    user_id INT NOT NULL,
    room_number INT NOT NULL,
    brand_affiliation VARCHAR(15) NOT NULL,
    hotel_address VARCHAR(50) NOT NULL,
    checkin_date DATE NOT NULL,
    checkout_date DATE NOT NULL,
    --breakfast_inclusion VARCHAR(20) NOT NULL, -- removed from p1   
    hotel_total_cost DECIMAL(10, 2) NOT NULL,
    room_cost DECIMAL(6, 2) NOT NULL,
    hotel_tax DECIMAL(9, 2) NOT NULL,
    hotel_booking_fees DECIMAL(5, 2) NOT NULL,
    hotel_booking_date DATE NOT NULL,
    PRIMARY KEY (hotel_reference_number),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (hotel_address, brand_affiliation, room_number) REFERENCES Room(hotel_address, brand_affiliation, room_number)
);
CREATE TABLE CarRentalBooking (
    car_rental_reference_number INT NOT NULL,
    user_id INT NOT NULL,
    car_license_plate VARCHAR(10) NOT NULL,
    pickup_location VARCHAR(50) NOT NULL,
    return_location VARCHAR(50) NOT NULL,
    pickup_date_time DATETIME NOT NULL,
    return_date_time DATETIME NOT NULL,
    car_rental_booking_date DATE NOT NULL,
    car_rental_cost DECIMAL(6, 2) NOT NULL,
    car_rental_tax DECIMAL(5, 2) NOT NULL,
    car_rental_booking_fees DECIMAL(4, 2) NOT NULL,
    car_rental_total_cost DECIMAL(7, 2) NOT NULL,
    insurance VARCHAR(50) NOT NULL, 
    PRIMARY KEY (car_rental_reference_number), 
    FOREIGN KEY (car_license_plate) REFERENCES Car(car_license_plate),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
*/

-- stored procedure template
/*
CREATE PROCEDURE nameeee (IN param1 INT, IN param2 INT) LANGUAGE SQL
BEGIN
  DECLARE var1 INT;
  DECLARE var2 INT;
  SET var1 = param1;
  SET var2 = param2;
  SELECT var1, var2;

  DECLARE cur CURSOR FOR
    SELECT * FROM mytable;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    OPEN cur;
    FETCH cur INTO var1, var2;
    WHILE done = 0 DO
      SELECT var1, var2;
      FETCH cur INTO var1, var2;
    END WHILE;
    CLOSE cur;
END
*/
--Write one stored procedure to perform operations on your project database. It should be nontrivial, illustrating a feature or features such as local variables, multiple SQL statements, loops etc. It should also involve a cursor. The stored procedure should use one or more parameters in a significant way.
--Write a stored procedure that retrieves flight_ref_number, flight_number, hotel_ref_number, brand_affiliation, car_rental_ref_number, car_license_plate 
--for a given user_id. The user_id should be a parameter to the stored procedure.
--The stored procedure should use a cursor to retrieve the data from the FlightBooking, HotelBooking, and CarRentalBooking tables.
--The stored procedure should return the retrieved data as a result set.



--Create a stored procedure that takes in a user_id and returns the total amount of money spent by that user on the website.
--Use a cursor

--Create the stored procedure in DB2
--The stored procedure should be called total_spent


CREATE PROCEDURE total_spent(IN user_id INT, OUT total DECIMAL(15, 2))
LANGUAGE SQL
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE flight_cost DECIMAL(15, 2);
    DECLARE hotel_cost DECIMAL(15, 2);
    DECLARE car_cost DECIMAL(15, 2);
    DECLARE flight_booking_cursor CURSOR FOR SELECT flight_total_cost FROM FlightBooking WHERE user_id = user_id;
    DECLARE hotel_booking_cursor CURSOR FOR SELECT hotel_total_cost FROM HotelBooking WHERE user_id = user_id;
    DECLARE car_rental_booking_cursor CURSOR FOR SELECT car_rental_total_cost FROM CarRentalBooking WHERE user_id = user_id;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    SET total = 0;
    OPEN flight_booking_cursor;
    OPEN hotel_booking_cursor;
    OPEN car_rental_booking_cursor;
    read_loop: LOOP
        FETCH flight_booking_cursor INTO flight_cost;
        FETCH hotel_booking_cursor INTO hotel_cost;
        FETCH car_rental_booking_cursor INTO car_cost;
        IF done THEN
            LEAVE read_loop;
        END IF;
        SET total = total + flight_cost + hotel_cost + car_cost;
    END LOOP;
    CLOSE flight_booking_cursor;
    CLOSE hotel_booking_cursor;
    CLOSE car_rental_booking_cursor;
END@

--Call the stored procedure in DB2

--Make a stored procedure that creates a view of all the flights that are available from a given city to another city on a given date using a cursor.
--The stored procedure should take in the departure city, arrival city, and date as parameters.
--The stored procedure should return the view name as a result set.

--Make a stored procedure that, given a user_id, returns the total amount of money spent by that user on the website. 
--The given user_id will be part of Registered, and the total amount of money spent will be the sum of the total cost of all the flight bookings, hotel bookings, and car rental bookings made by the user.
--Update the column totalspent in Registered with the total amount of money spent by the user.
--Use a cursor to retrieve the data from the FlightBooking, HotelBooking, and CarRentalBooking tables.

CREATE PROCEDURE total_spent(IN user_id INT, OUT total DECIMAL(15, 2))
LANGUAGE SQL
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE flight_cost DECIMAL(15, 2);
    DECLARE hotel_cost DECIMAL(15, 2);
    DECLARE car_cost DECIMAL(15, 2);
    DECLARE flight_booking_cursor CURSOR FOR SELECT flight_total_cost FROM FlightBooking WHERE user_id = user_id;
    DECLARE hotel_booking_cursor CURSOR FOR SELECT hotel_total_cost FROM HotelBooking WHERE user_id = user_id;
    DECLARE car_rental_booking_cursor CURSOR FOR SELECT car_rental_total_cost FROM CarRentalBooking WHERE user_id = user_id;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    SET total = 0;
    OPEN flight_booking_cursor;
    OPEN hotel_booking_cursor;
    OPEN car_rental_booking_cursor;
    read_loop: LOOP
        FETCH flight_booking_cursor INTO flight_cost;
        FETCH hotel_booking_cursor INTO hotel_cost;
        FETCH car_rental_booking_cursor INTO car_cost;
        IF done THEN
            LEAVE read_loop;
        END IF;
        SET total = total + flight_cost + hotel_cost + car_cost;
    END LOOP;
    CLOSE flight_booking_cursor;
    CLOSE hotel_booking_cursor;
    CLOSE car_rental_booking_cursor;

    UPDATE Registered SET totalspent = total WHERE user_id = user_id;

END@






--Create the stored procedure in DB2
--The stored procedure should be called create_flight_view


CREATE PROCEDURE create_flight_view(IN departure_city VARCHAR(20), IN departure_country VARCHAR(15), IN arrival_city VARCHAR(20), IN arrival_country VARCHAR(15), IN date DATE, OUT view_name VARCHAR(128))
LANGUAGE SQL
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE flight_cursor CURSOR FOR SELECT flight_number, departure_date_time, arrival_date_time FROM Flights WHERE departure_city = departure_city AND departure_country = departure_country AND arrival_city = arrival_city AND arrival_country = arrival_country AND departure_date_time = date;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    SET view_name = 'flight_view_' || departure_city || '_' || departure_country || '_' || arrival_city || '_' || arrival_country || '_' || date;
    SET @sql = 'CREATE VIEW ' || view_name || ' AS SELECT * FROM Flights WHERE departure_city = ' || departure_city || ' AND departure_country = ' || departure_country || ' AND arrival_city = ' || arrival_city || ' AND arrival_country = ' || arrival_country || ' AND departure_date_time = ' || date;
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    OPEN flight_cursor;
    read_loop: LOOP
        FETCH flight_cursor INTO flight_number, departure_date_time, arrival_date_time;
        IF done THEN
            LEAVE read_loop;
        END IF;
    END LOOP;
    CLOSE flight_cursor;
END@


CREATE PROCEDURE test10(IN user_id INT)
LANGUAGE SQL
BEGIN
    DECLARE total DECIMAL(15, 2);
    SET total = 9999.99;

    UPDATE Registered SET totalspent = total WHERE user_id = user_id;

END@


CREATE PROCEDURE userSpendings(IN p_user_id INT)
LANGUAGE SQL
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE flight_cost DECIMAL(15, 2);
    DECLARE total DECIMAL(15, 2);
    --SET total = 0;

    
    DECLARE flight_booking_cursor CURSOR FOR SELECT flight_total_cost FROM FlightBooking WHERE user_id = p_user_id; 
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    SET total = 0;
    OPEN flight_booking_cursor;
    read_loop: LOOP
        FETCH flight_booking_cursor INTO flight_cost;
        IF done THEN
            LEAVE read_loop;
        END IF;
        SET total = total + flight_cost;
    END LOOP;
    CLOSE flight_booking_cursor;

    UPDATE Registered SET totalspent = total WHERE user_id = p_user_id;

END@


CREATE PROCEDURE userSpendings(IN p_user_id INT)
LANGUAGE SQL
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE flight_cost DECIMAL(15, 2);
    DECLARE hotel_cost DECIMAL(15, 2);
    DECLARE car_cost DECIMAL(15, 2);
    DECLARE total DECIMAL(15, 2);
    
    DECLARE flight_booking_cursor CURSOR FOR SELECT flight_total_cost FROM FlightBooking WHERE user_id = p_user_id; 
    DECLARE hotel_booking_cursor CURSOR FOR SELECT hotel_total_cost FROM HotelBooking WHERE user_id = p_user_id;
    DECLARE car_rental_booking_cursor CURSOR FOR SELECT car_rental_total_cost FROM CarRentalBooking WHERE user_id = p_user_id;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    SET total = 0;
    OPEN flight_booking_cursor;
    OPEN hotel_booking_cursor;
    OPEN car_rental_booking_cursor;
    WHILE done = 0 DO
        FETCH flight_booking_cursor INTO flight_cost;
        FETCH hotel_booking_cursor INTO hotel_cost;
        FETCH car_rental_booking_cursor INTO car_cost;
        SET total = total + flight_cost + hotel_cost + car_cost;
    END WHILE;
    CLOSE flight_booking_cursor;
    CLOSE hotel_booking_cursor;
    CLOSE car_rental_booking_cursor;

    UPDATE Registered SET totalspent = total WHERE user_id = p_user_id;

END@

CREATE PROCEDURE nameeee (IN param1 INT, IN param2 INT) LANGUAGE SQL
BEGIN
  DECLARE var1 INT;
  DECLARE var2 INT;
  SET var1 = param1;
  SET var2 = param2;
  SELECT var1, var2;

  DECLARE cur CURSOR FOR
    SELECT * FROM mytable;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    OPEN cur;
    FETCH cur INTO var1, var2;
    WHILE done = 0 DO
      SELECT var1, var2;
      FETCH cur INTO var1, var2;
    END WHILE;
    CLOSE cur;
END