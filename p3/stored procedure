/*
CONNECT TO COMP421;

-- Remember to put the create table ddls for the tables with foreign key references
--    ONLY AFTER the parent tables have already been created.

-- orders are changed from p1 to make more sense logically
CREATE TABLE Users (
    user_id INT NOT NULL,
    name VARCHAR(25) NOT NULL,
    email VARCHAR(40) NOT NULL,
    phone_number VARCHAR(22) NOT NULL,
    address VARCHAR(50) NOT NULL,
    credit_card_information VARCHAR(28) NOT NULL,
    PRIMARY KEY (user_id)
);
CREATE TABLE Registered (
    user_id INT NOT NULL,
    username VARCHAR(10) UNIQUE NOT NULL, ------------------------------------------------------------add
    password VARCHAR(10) NOT NULL,
    language CHAR(2) DEFAULT 'no' NOT NULL, -- modified from p1
    --history CLOB, -------------------------------------------------------------------------------------drop?
    PRIMARY KEY (user_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
CREATE TABLE Cities (
    city_name VARCHAR(20) NOT NULL,
    country VARCHAR(15) NOT NULL,
    PRIMARY KEY (city_name, country)
);
CREATE TABLE DepartureCity( 
    departure_city VARCHAR(20) NOT NULL,
    departure_country VARCHAR(15) NOT NULL,
    airport_departure_name VARCHAR(65) NOT NULL,
    PRIMARY KEY (departure_city, departure_country),
    FOREIGN KEY (departure_city, departure_country) REFERENCES Cities(city_name, country)
);
CREATE TABLE ArrivalCity( 
    arrival_city VARCHAR(20) NOT NULL,
    arrival_country VARCHAR(15) NOT NULL,
    airport_arrival_name VARCHAR(65) NOT NULL,
    PRIMARY KEY (arrival_city, arrival_country),
    FOREIGN KEY (arrival_city, arrival_country) REFERENCES Cities(city_name, country)
);
CREATE TABLE Route ( 
    departure_city VARCHAR(20) NOT NULL,
    departure_country VARCHAR(15) NOT NULL,
    arrival_city VARCHAR(20) NOT NULL,
    arrival_country VARCHAR(15) NOT NULL,
    PRIMARY KEY (departure_city, departure_country, arrival_city, arrival_country),
    FOREIGN KEY (departure_city, departure_country) REFERENCES DepartureCity(departure_city, departure_country),
    FOREIGN KEY (arrival_city, arrival_country) REFERENCES ArrivalCity(arrival_city, arrival_country)
);
CREATE TABLE Flights ( 
    flight_number VARCHAR(7) NOT NULL,
    airline_policy VARCHAR(45) NOT NULL,
    airline VARCHAR(25) NOT NULL,
    airplane_model VARCHAR(25) NOT NULL,
    economy_seats INT NOT NULL,
    premium_economy_seats INT,
    business_seats INT,
    first_class_seats INT,
    economy_cost DECIMAL(6, 2) NOT NULL,
    premium_economy_cost DECIMAL(6, 2),
    business_cost DECIMAL(7, 2),
    first_class_cost DECIMAL(7, 2),
    departure_city VARCHAR(20) NOT NULL,
    departure_country VARCHAR(15) NOT NULL,
    arrival_city VARCHAR(20) NOT NULL,
    arrival_country VARCHAR(15) NOT NULL,
    departure_date_time DATETIME NOT NULL,
    arrival_date_time DATETIME NOT NULL,
    flight_duration TIME NOT NULL,
    PRIMARY KEY (flight_number, departure_date_time),
    FOREIGN KEY (departure_city, departure_country, arrival_city, arrival_country) REFERENCES Route(departure_city, departure_country, arrival_city, arrival_country)
    --FOREIGN KEY (arrival_city, arrival_country) REFERENCES ArrivalCity(arrival_city, arrival_country)
);
CREATE TABLE Car (
    car_license_plate VARCHAR(10) NOT NULL,
    number_of_seats INT NOT NULL,
    car_rental_agency VARCHAR(12) NOT NULL,
    transmission_type VARCHAR(12) NOT NULL,
    car_model VARCHAR(25) NOT NULL,
    car_engine_type VARCHAR(10) NOT NULL,
    car_daily_cost DECIMAL(5, 2) NOT NULL, -- changed from p1
    city_name VARCHAR(20) NOT NULL,
    country VARCHAR(15) NOT NULL,
    company_policy VARCHAR(50) NOT NULL, 
    AC CHAR(1) NOT NULL, -- changed from p1
    carplay CHAR(1),
    PRIMARY KEY (car_license_plate),
    FOREIGN KEY (city_name, country) REFERENCES Cities(city_name, country)
);
CREATE TABLE Hotel ( 
    brand_affiliation VARCHAR(15) NOT NULL,
    hotel_address VARCHAR(50) NOT NULL,
    hotel_policy VARCHAR(100) NOT NULL, 
    airport_shuttle VARCHAR(20),
    business_facilities VARCHAR(40),
    restaurants VARCHAR(45),
    listing_name VARCHAR(35) NOT NULL,
    fitness_center VARCHAR(20),
    on_site_parking VARCHAR(45),
    pet_allowance CHAR(1),
    pool CHAR(1),
    city_name VARCHAR(20) NOT NULL,
    country VARCHAR(15) NOT NULL,
    PRIMARY KEY (brand_affiliation, hotel_address), 
    FOREIGN KEY (city_name, country) REFERENCES Cities(city_name, country)
);
CREATE TABLE Room ( 
    hotel_address VARCHAR(50) NOT NULL,
    brand_affiliation VARCHAR(15) NOT NULL,
    room_number INT NOT NULL,
    room_name VARCHAR(20) NOT NULL,
    -- availability removed from p1
    room_capacity INT NOT NULL,
    beds VARCHAR(15) NOT NULL,
    room_price DECIMAL(6, 2) NOT NULL,
    size VARCHAR(10) NOT NULL, -- changed from p1
    free_wifi CHAR(1) NOT NULL, -- changed from p1
    view VARCHAR(20) NOT NULL, -- changed from p1
    minibar CHAR(1) NOT NULL, -- changed from p1
    private_bathroom CHAR(1) NOT NULL, -- changed from p1
    smoking CHAR(1) NOT NULL, -- changed from p1
    PRIMARY KEY (hotel_address, brand_affiliation, room_number),
    FOREIGN KEY (brand_affiliation, hotel_address) REFERENCES Hotel(brand_affiliation, hotel_address)
);
CREATE TABLE FlightBooking ( 
    flight_reference_number INT NOT NULL,
    user_id INT NOT NULL,
    passenger_names VARCHAR(150) NOT NULL,
    flight_number VARCHAR(7) NOT NULL,
    departure_date_time DATETIME NOT NULL,
    flight_total_cost DECIMAL(9, 2) NOT NULL,
    fare_class VARCHAR(10) NOT NULL,
    seat_numbers VARCHAR(21) NOT NULL,
    plane_ticket_cost DECIMAL(8, 2) NOT NULL,
    plane_ticket_surcharge DECIMAL(7, 2) NOT NULL,
    plane_ticket_tax DECIMAL(7, 2) NOT NULL,
    flight_booking_fees DECIMAL(5, 2) NOT NULL,
    flight_booking_date DATE NOT NULL,
    PRIMARY KEY (flight_reference_number),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (flight_number, departure_date_time) REFERENCES Flights(flight_number, departure_date_time)
);
CREATE TABLE HotelBooking ( 
    hotel_reference_number INT NOT NULL,
    user_id INT NOT NULL,
    room_number INT NOT NULL,
    brand_affiliation VARCHAR(15) NOT NULL,
    hotel_address VARCHAR(50) NOT NULL,
    checkin_date DATE NOT NULL,
    checkout_date DATE NOT NULL,
    --breakfast_inclusion VARCHAR(20) NOT NULL, -- removed from p1   
    hotel_total_cost DECIMAL(10, 2) NOT NULL,
    room_cost DECIMAL(6, 2) NOT NULL,
    hotel_tax DECIMAL(9, 2) NOT NULL,
    hotel_booking_fees DECIMAL(5, 2) NOT NULL,
    hotel_booking_date DATE NOT NULL,
    PRIMARY KEY (hotel_reference_number),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (hotel_address, brand_affiliation, room_number) REFERENCES Room(hotel_address, brand_affiliation, room_number)
);
CREATE TABLE CarRentalBooking (
    car_rental_reference_number INT NOT NULL,
    user_id INT NOT NULL,
    car_license_plate VARCHAR(10) NOT NULL,
    pickup_location VARCHAR(50) NOT NULL,
    return_location VARCHAR(50) NOT NULL,
    pickup_date_time DATETIME NOT NULL,
    return_date_time DATETIME NOT NULL,
    car_rental_booking_date DATE NOT NULL,
    car_rental_cost DECIMAL(6, 2) NOT NULL,
    car_rental_tax DECIMAL(5, 2) NOT NULL,
    car_rental_booking_fees DECIMAL(4, 2) NOT NULL,
    car_rental_total_cost DECIMAL(7, 2) NOT NULL,
    insurance VARCHAR(50) NOT NULL, 
    PRIMARY KEY (car_rental_reference_number), 
    FOREIGN KEY (car_license_plate) REFERENCES Car(car_license_plate),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
*/

-- stored procedure template
/*
CREATE PROCEDURE nameeee (IN param1 INT, IN param2 INT) LANGUAGE SQL
BEGIN
  DECLARE var1 INT;
  DECLARE var2 INT;
  SET var1 = param1;
  SET var2 = param2;
  SELECT var1, var2;

  DECLARE cur CURSOR FOR
    SELECT * FROM mytable;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    OPEN cur;
    FETCH cur INTO var1, var2;
    WHILE done = 0 DO
      SELECT var1, var2;
      FETCH cur INTO var1, var2;
    END WHILE;
    CLOSE cur;
END
*/
--Write one stored procedure to perform operations on your project database. It should be nontrivial, illustrating a feature or features such as local variables, multiple SQL statements, loops etc. It should also involve a cursor. The stored procedure should use one or more parameters in a significant way.

-- stored procedure that will Create a new relation and load it with values computed from one or more existing relations. using the created tables
-- using CarRentalBooking and Car tables, create a stored procedure called createCarRentalRelation that will create a new table entry in CarRentalBooking table and load it with values computed from the CarRentalBooking table and Car table
-- that will be inserted into the CarRentalBooking table. The new relation will contain the following columns: car_rental_reference_number, user_id, car_license_plate, pickup_location, return_location, pickup_date_time, return_date_time, car_rental_booking_date, car_rental_cost, car_rental_tax, car_rental_booking_fees, car_rental_total_cost, insurance
-- the data will be loaded from the CarRentalBooking table and Car table and User table
-- the stored procedure will take in the following parameters: user_id, pickup_date_time, return_date_time, budget, number of people, city_name, country
-- the stored procedure will return the car_rental_reference_number, car_license_plate, car_rental_cost, car_rental_tax, car_rental_booking_fees, car_rental_total_cost, insurance
-- it will do so by using a cursor to loop through the Car table to find a car that fits the budget and number of people and is in the city, country and then calculate the cost and tax and booking fees and total cost and insurance and then insert the values into the CarRentalBooking table
-- generate a unique car_rental_reference_number

CREATE OR REPLACE PROCEDURE createCarRentalRelation2 (
    IN p_user_id INT,
    IN p_pickup_date_time DATETIME,
    IN p_return_date_time DATETIME,
    IN p_budget DECIMAL(5, 2),
    IN p_num_people INT,
    IN p_city_name VARCHAR(20),
    IN p_country VARCHAR(15),
    IN p_pickup_location VARCHAR(50),
    IN p_return_location VARCHAR(50)
)
LANGUAGE SQL
BEGIN
    DECLARE car_rental_ref_num INT;
    DECLARE car_rental_plate VARCHAR(10);
    DECLARE car_rental_cost DECIMAL(6, 2);
    DECLARE car_rental_tax DECIMAL(5, 2);
    DECLARE car_rental_booking_fees DECIMAL(4, 2);
    DECLARE car_rental_total_cost DECIMAL(7, 2);
    DECLARE car_rental_insurance VARCHAR(50);
    DECLARE booked_days INT;
    DECLARE done INT DEFAULT 0;
    -- Declare cursor for selecting available cars
    DECLARE cur CURSOR FOR
        SELECT car_license_plate, car_daily_cost
        FROM Car
        WHERE city_name = p_city_name AND country = p_country
        AND car_daily_cost <= p_budget 
        AND number_of_seats >= p_num_people
        AND car_license_plate NOT IN (
            SELECT car_license_plate
            FROM CarRentalBooking
            WHERE (pickup_date_time BETWEEN p_pickup_date_time AND p_return_date_time)
            OR (return_date_time BETWEEN p_pickup_date_time AND p_return_date_time)
            OR (p_pickup_date_time BETWEEN pickup_date_time AND return_date_time)
            OR (p_return_date_time BETWEEN pickup_date_time AND return_date_time)
        );
    -- Declare handler for cursor not found
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;  
    -- Generate unique car_rental_reference_number
    SET car_rental_ref_num = (SELECT MAX(car_rental_reference_number) + 1 FROM CarRentalBooking);
    -- Calculate booked days
    SET booked_days = DAYS(p_return_date_time) - DAYS(p_pickup_date_time);
    -- Open cursor
    OPEN cur;
    -- Loop through available cars
    carLoop: LOOP
        FETCH cur INTO car_rental_plate, car_rental_cost;
        -- Exit loop if no more rows
        IF done THEN
            LEAVE carLoop;
        END IF;
        -- Calculate tax and booking fees
        SET car_rental_cost = car_rental_cost * booked_days;
        SET car_rental_tax = 0.1 * car_rental_cost;
        SET car_rental_booking_fees = 0.05 * car_rental_cost;
        -- Calculate total cost
        SET car_rental_total_cost = car_rental_cost + car_rental_tax + car_rental_booking_fees;
        -- Select insurance for the car
        SET car_rental_insurance = (
            SELECT company_policy
            FROM Car
            WHERE car_license_plate = car_rental_plate
            AND city_name = p_city_name
            AND country = p_country
            FETCH FIRST ROW ONLY 
        );
        -- Insert into CarRentalBooking table
        INSERT INTO CarRentalBooking (car_rental_reference_number, user_id, car_license_plate, pickup_location, return_location, pickup_date_time, return_date_time, car_rental_booking_date, car_rental_cost, car_rental_tax, car_rental_booking_fees, car_rental_total_cost, insurance)
        VALUES (car_rental_ref_num, p_user_id, car_rental_plate, p_pickup_location, p_return_location, p_pickup_date_time, p_return_date_time, CURRENT_DATE, car_rental_cost, car_rental_tax, car_rental_booking_fees, car_rental_total_cost, car_rental_insurance);
--CHECK PICKUP LOCATION
        -- Exit loop after inserting one entry
        LEAVE carLoop;
    END LOOP;
    -- Close cursor
    CLOSE cur;
    -- Return car rental details
   -- SELECT car_rental_ref_num, car_rental_plate, car_rental_cost, car_rental_tax, car_rental_booking_fees, car_rental_total_cost, car_rental_insurance;
END@


CALL createCarRentalRelation2(           
    1,
    '2024-03-15 10:00:00', 
    '2024-03-20 10:00:00', 
    150.00, 
    4,
    'Montreal', 
    'Canada', 
    'Pierre-Elliot Trudeau International Airport', 
    'Pierre-Elliot Trudeau International Airport' 
);

/*
A value cannot be assigned to a host variable in the SELECT, VALUES, 
FETCH or assignment statement because the data types are not compatible.  
SQLSTATE=42806
*/


CREATE PROCEDURE procedureTest (
    IN p_city_name VARCHAR(20),
    IN p_country VARCHAR(15)
)
LANGUAGE SQL
BEGIN

    INSERT INTO Cities (city_name, country)
    VALUES (p_city_name, p_country);

END@